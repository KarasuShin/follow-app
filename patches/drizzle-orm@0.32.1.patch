diff --git a/expo-sqlite/query.cjs b/expo-sqlite/query.cjs
index dc1d75f1105881cd6384161abfa703fc52feaa23..1cd04b758da035618b8edca59f3ff0436c9510fc 100644
--- a/expo-sqlite/query.cjs
+++ b/expo-sqlite/query.cjs
@@ -26,7 +26,7 @@ var import_react = require("react");
 var import__ = require("../index.cjs");
 var import_sqlite_core = require("../sqlite-core/index.cjs");
 var import_query = require("../sqlite-core/query-builders/query.cjs");
-const useLiveQuery = (query) => {
+const useLiveQuery = (query, deps = []) => {
   const [data, setData] = (0, import_react.useState)(
     (0, import__.is)(query, import_query.SQLiteRelationalQuery) && query.mode === "first" ? void 0 : []
   );
@@ -55,7 +55,7 @@ const useLiveQuery = (query) => {
     return () => {
       listener?.remove();
     };
-  }, []);
+  }, deps);
   return {
     data,
     error,
diff --git a/expo-sqlite/query.d.cts b/expo-sqlite/query.d.cts
index d0b8b1bc0ef8d32780899a3ca74e782b1f2da7e1..e731d1f2eb0e92546b58a3c215e6d20ab18d2e2e 100644
--- a/expo-sqlite/query.d.cts
+++ b/expo-sqlite/query.d.cts
@@ -1,6 +1,6 @@
 import type { AnySQLiteSelect } from "../sqlite-core/index.cjs";
 import { SQLiteRelationalQuery } from "../sqlite-core/query-builders/query.cjs";
-export declare const useLiveQuery: <T extends Pick<AnySQLiteSelect, "_" | "then"> | SQLiteRelationalQuery<"sync", unknown>>(query: T) => {
+export declare const useLiveQuery: <T extends Pick<AnySQLiteSelect, "_" | "then"> | SQLiteRelationalQuery<"sync", unknown>>(query: T, deps?: unknown[]) => {
     readonly data: Awaited<T>;
     readonly error: Error | undefined;
     readonly updatedAt: Date | undefined;
diff --git a/expo-sqlite/query.d.ts b/expo-sqlite/query.d.ts
index 44f7c20a566c5fbe8329e0ce02426da83db56716..73ae3ade13d03883138f99ef39240bd77d6b6a0e 100644
--- a/expo-sqlite/query.d.ts
+++ b/expo-sqlite/query.d.ts
@@ -1,6 +1,6 @@
 import type { AnySQLiteSelect } from "../sqlite-core/index.js";
 import { SQLiteRelationalQuery } from "../sqlite-core/query-builders/query.js";
-export declare const useLiveQuery: <T extends Pick<AnySQLiteSelect, "_" | "then"> | SQLiteRelationalQuery<"sync", unknown>>(query: T) => {
+export declare const useLiveQuery: <T extends Pick<AnySQLiteSelect, "_" | "then"> | SQLiteRelationalQuery<"sync", unknown>>(query: T, deps?: unknown[]) => {
     readonly data: Awaited<T>;
     readonly error: Error | undefined;
     readonly updatedAt: Date | undefined;
diff --git a/expo-sqlite/query.js b/expo-sqlite/query.js
index 48953a23ba7783fba6b2a8be741eb5671ae9de7f..6a41bbf045debbdb97cf4fa14292bc28f2cfb233 100644
--- a/expo-sqlite/query.js
+++ b/expo-sqlite/query.js
@@ -3,7 +3,7 @@ import { useEffect, useState } from "react";
 import { is, SQL, Subquery } from "../index.js";
 import { getTableConfig, getViewConfig, SQLiteTable, SQLiteView } from "../sqlite-core/index.js";
 import { SQLiteRelationalQuery } from "../sqlite-core/query-builders/query.js";
-const useLiveQuery = (query) => {
+const useLiveQuery = (query, deps = []) => {
   const [data, setData] = useState(
     is(query, SQLiteRelationalQuery) && query.mode === "first" ? void 0 : []
   );
@@ -32,7 +32,7 @@ const useLiveQuery = (query) => {
     return () => {
       listener?.remove();
     };
-  }, []);
+  }, deps);
   return {
     data,
     error,
